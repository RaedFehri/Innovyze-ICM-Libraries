{
    "mainFile": "tmpl base.js",
    "renderMode": "html",
    "additionalFileLanguages": {},
    "inputText": "[html]\n    <script>\n        //  <div style=\"float:right;background-color:#ffdddd;border-radius:5px;border:5px solid #ffdddd;\"><b>Exchange</b></div>\n        //  <div style=\"float:right;background-color:#aaaaaa;border-radius:5px;border:5px solid #aaaaaa;\"><b>v6.5.1</b></div>\n        //  <div style=\"float:right;background-color:#ddffdd;border-radius:5px;border:5px solid #ddffdd;\"><b>Official</b></div>\n    </script>\n[/html]`\n`\n# InfoWorks ICM API Referenc\n    `## DISCLAIMER`\n    `\n        [styler style=\"color:red;\"]\n            [b]\n                This documentation is community maintained and we cannot guarantee the information in this document is correct.\n                The presence of a class or method in this document does not guarantee it will exist and/or work as described,\n                or in the version specified. If you would like to contribute to the documentation see [link url=\"\"]contributing[/link].\n            [/b]\n        [/styler]`\n    `\n    ## WSApplication`\n        `\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n            ### `add_ons_folder``\n                    `\n                `#### Syntax:`\n                    `\n                    ```ruby\n                    s=WSApplication.add_ons_folder\n                    ````\n                        `\n                `#### Description:`\n                    `\n                    Returns the full path of the 'add ons' folder described in Appendix 3 e.g.`\n                    `\n                    `C:\\\\Users\\\\badgerb\\\\AppData\\\\Roaming\\\\Innovyze\\\\WorkgroupClient\\\\scripts`\n                    `\n                    > Note - This folder will not exist unless manually created. Its parent folder will exist if InfoNet/InfoWorks has been opened on this PC.`\n                            `\n                    `\n                    `\n        [/method]`\n        `\n        [method exchange=false ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n            ### `background_network``\n                `\n                `#### Syntax:`\n                    `\n                    ```ruby\n                        bn=WSApplication.background_network\n                    ````\n                    `\n                `#### Description:`\n                    `\n                    Returns the background network for the GeoPlan that currently has focus. Scripts may\n                    only work on current and background networks in the UI mode. The background network may, \n                    of course, be nil if no background network is loaded.`\n                    `\n                    `\n                    `\n        [/method]\n        [method exchange=true ui=false documentation=\"official\" icmVersion=\"1.6.6\"]        \n            ### `cancel_job``\n                    `\n                `#### Syntax:`\n                        `\n                    ```ruby\n                    WSApplication.cancel_job(job)\n                    ````\n                        `\n                `#### Description:`\n                    `\n                    Cancels a job being run by the agent. The parameter is a job ID from the\n                    array returned by launch\\_sims â€“ see below.`\n                    `\n                `\n                `\n        [/method]\n        [method exchange=false ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ### `colour``\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                col=WSApplication.colour(r,g,b)\n                ````\n                    `\n            `#### Description:`\n                `\n                This method exists for convenience in the context of the graph method\n                described below. Given 3 parameters, r, g and b from 0 to 255 returns a\n                colour with those red, green and blue values e.g. colour(0,0,0) returns\n                black, colour(255,0,0) returns red, colour(255,255,255) returns white.`\n                    `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`connect_local_agent` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                bSuccess=WSApplication.connect_local_agent(wait_time)\n                ````\n                    `\n            `#### Description:`\n                `\n                Connects to the local agent, returning true if it succeeds. The call\n                waits for a number of milliseconds specified in the parameter.`\n                `\n                This method must be called before the `launch_sims` method is called.`\n                    `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`current_database` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                db=WSApplication.current_database\n                ````\n                    `\n            `#### Description:`\n                `\n                Returns the current database. Only very limited database functionality\n                is available from Ruby scripting from within the UI. This method is used\n                to return the database object for the currently open master database.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`current_network` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                on=WSApplication.current_network\n                ````\n                    `\n            `#### Description:`\n                        `\n                Returns the network for the GeoPlan that currently has focus. Scripts\n                may only work on the current network (and background networks) in the UI\n                mode.`\n                `\n                If a Ruby script is run in the UI when the current network has results\n                then the results will be available to the script.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`create` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.create(path)\n                ````\n                `\n            `#### Example:`\n                `\n                ```ruby\n                WSApplication.create 'd:\\\\temp\\\\1.icmm'\n                ````\n                `\n            `#### Description:`\n                `\n                Creates a standard database at the location given by the path parameter.`\n                `\n                Likely exceptions for this method to throw are the following\n                RuntimeExceptions:`\n                `\n                Error 43 : Can't overwrite an existing database`\n                `\n                z:\\\\test.icmm contains an incorrect path`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`create_transportable` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.create_transportable(path)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Creates a transportable database at the location given by the path\n                parameter.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`file_dialog` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                file_or_files=WSApplication.file_dialog(open, extension,description, default_name,allow_multiple_files,hard_wire_cancel)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Displays a file dialog (open or save), and if OK is selected returns the\n                file path, or if allow\\_multiple\\_files was set to true, an array of\n                selected files.`\n                `\n                The parameters are as follows:`\n                `\n                open â€“ true if the dialog is to be an 'open' dialog (i.e. to select an\n                existing file to be read subsequently in the Ruby script), false if it\n                is to be a 'save' dialog (i.e. to select the name of a file to be\n                written subsequently in the Ruby script)`\n                `\n                extension â€“ the extension of the file e.g. 'csv', 'dat', 'xml'.`\n                `\n                Description â€“ a description of the type of file to save which will\n                appear in the file dialog e.g. 'Comma Separated Value file'.`\n                `\n                Default name â€“ a default name to save the file (if open is false), or a\n                default name to search for (if open is true).`\n                `\n                Allow multiple files â€“ true if open is false and you wish to allow more\n                than one file to be selected. The parameter is ignored if open is true.`\n                `\n                The method returns the path of the file chosen as a string, unless open\n                is true and allow\\_multiple\\_files is true, in which case an array of\n                strings is returned.`\n                `\n                Hard-wire cancel â€“ if this parameter is true or nil, if the user cancels\n                from the dialog, the execution of the Ruby script is stopped.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`folder_dialog` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                folder=WSApplication.folder_dialog(title,hard_wire_cancel)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Displays a dialog allowing the selection of a folder, returned as a\n                string.`\n                `\n                The parameters are as follows:`\n                `\n                Title â€“ a title for the dialog`\n                `\n                Hard-wire cancel â€“ if the parameter is true or nil, if the user cancels\n                from the dialog, the execution of the Ruby script is stopped.`\n                `\n                If the user selects OK, the path of the folder is returned as a string.\n                If the user selects cancel and the hard\\_wire\\_cancel parameter is set\n                to false, nil will be returned.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`graph` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.graph(params)\n                ````\n                `\n                Example:`\n                `\n                ```ruby\n                graphs = {\n                    \"WindowTitle\" => \"My awesome traces\",\n                    \"GraphTitle\"  => \"My cool trace\",\n                    \"XAxisLabel\"  => \"Cool X-Axis\",\n                    \"YAxisLabel\"  => \"Cool Y-Axis\",\n                    \"IsTime\"      => false\n                    \"Traces\"      => [\n                        {\n                            \"Title\"        => \"x^2 graph\",\n                            \"TraceColour\"  => 0,\n                            \"SymbolColour\" => 0,\n                            \"Marker\"       => \"Circle\",\n                            \"LineType\"     => \"Solid\",\n                            XArray         => [1,2,3,4,5,6,7,8,9,10],\n                            YArray         => [1,4,9,16,25,36,49,64,81,100]\n                        },\n                        {\n                            \"Title\"        => \"x^3 graph\",\n                            \"TraceColour\"  => 255,\n                            \"SymbolColour\" => 255,\n                            \"Marker\"       => \"Circle\",\n                            \"LineType\"     => \"Solid\",\n                            XArray         => [1,2,3,4,5,6,7,8,9,10],\n                            YArray         => [1,8,27,64,125,216,343,512,729,1000]\n                        }\n                    ]\n                }\n                WSApplication.graph(graphs)\n                ````\n                `\n            `#### Description:`\n                `\n                **This method appears to be deprecated!**`\n                `\n                Displays a graph according to the parameters passed in.`\n                `\n                The graph method contains 1 parameter, a hash.`\n                `\n                It has the following keys, which are all strings:`\n                `\n                WindowTitle â€“ a string containing the title of the graph window`\n                `\n                GraphTitle â€“ a string containing the title of the graph (i.e. this\n                appears IN the window rather than being the title)`\n                `\n                XAxisLabel â€“ a string containing the label of the X-axis`\n                `\n                YAxisLabel â€“ a string containing the label of the Y-axis`\n                `\n                IsTime â€“ a value which evaluates as true or false, which should be set\n                to true if the x axis is made up of time values and is labelled as dates\n                / times.`\n                `\n                Traces â€“ an array of traces defined as follows:`\n                `\n                Each trace in the array of traces is in turn also a hash.`\n                `\n                The trace hash has the following keys, which are all strings:`\n                `\n                Title â€“ a string giving the trace's name`\n                `\n                TraceColour â€“ an integer containing an RGB value of the trace's colour.\n                A convenient way of getting this is to use the WSApplicatioon.colour\n                method`\n                `\n                SymbolColour - â€“ an integer containing an RGB value of the colour used\n                for the symbol used at the points along the trace. A convenient way of\n                getting this is to use the WSApplicatioon.colour method`\n                `\n                Marker â€“ a string containing the symbol to be used for the points along\n                the trace â€“ possible values are:`\n                `\n                None, Cross, XCross, Star, Circle, Triangle, Diamond, Square, FCircle,\n                FTriangle, FDiamond, FSquare`\n                `\n                The F in the above names means 'filled'.`\n                `\n                LineType â€“ a string containing the style to be used for the trace's line\n                â€“ possible values are:`\n                `\n                None, Solid, Dash, Dot, DashDot, DashDotDot`\n                `\n                XArray â€“ an array containing the values used in the trace for the x\n                coordinates of the points. They must be floating point values (or values\n                that can be converted to a floating point values) if IsTime is false or\n                time values if IsTime is true.`\n                `\n                YArray - â€“ an array containing the values used in the trace for the y\n                coordinates of the points. They must be floating point values (or values\n                that can be converted to a floating point values).`\n                `\n                There must be an equal number of values in the XArray and YArray in each\n                trace, though they can vary between traces.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`input_box` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                s=WSApplication.input_box(prompt,title,default)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Displays a box allowing the input of a text value. The prompt appears on\n                the dialog, the title appears as the dialog title, unless it is nil or\n                the empty string in which case a default title appears. The text field\n                is initially set to the 'default' parameter. If the user hits OK, the\n                value in the text field is returned, otherwise the empty string is\n                returned.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`launch_sims` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                arr=WSApplication.launch_sims(sims, server, results_on_server,\n                max_threads, after)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Launches one or more simulations in a flexible way. This method requires\n                connect\\_local\\_agent to have been called prior to its being called.`\n                `\n                The parameters are as follows:`\n                `\n                > Sims â€“ an array of WSModelObject objects for the simulations\n                >\n                > Server â€“ the name of the server to run the simulation on, or '.' for\n                > the local machine or '\\*' for any computer.\n                >\n                > Results\\_on\\_server â€“ Boolean\n                >\n                > Max\\_threads â€“ the maximum number of threads to use for this\n                > simulation (or 0 to allow the simulation agent to choose)\n                >\n                > After â€“ the time (as a time\\_t time) after which the simulation should\n                > run, or 0 for 'now'.`\n                `\n                The method returns an array of 'job IDs', one for each simulation in the\n                sims array, the ID of a given simulation will be nil if the simulation\n                failed to launch. The job IDs are strings intended for use as parameters\n                to the wait\\_for\\_jobs method and the cancel\\_job method. Any nil values\n                in the array will be safely ignored by the wait\\_for\\_jobs method so the\n                results array may be passed into it.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`message_box` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                text=WSApplication.message_box(text,options,icon,hard_wire_cancel)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Displays a message box.`\n                `\n                The parameters are as follows:`\n                `\n                Text â€“ the text displayed`\n                `\n                Options â€“ must be nil or one of the following strings: 'OK', 'OKCancel',\n                'YesNo', 'YesNoCancel'. If the parameter is nil, then the OK and Cancel\n                buttons are displayed.`\n                `\n                Icon â€“ must be nil or one of the following strings: '!', '?',\n                'Information'. If the parameter is nil then the '!' icon is used.`\n                `\n                Hard Wire Cancel â€“ if this is set to true or nil then hitting the cancel\n                button (if there is one) will result in the Ruby script processing\n                stopping as though the 'cancel' button had been hit.`\n                `\n                The method returns 'Yes','No','OK' or 'Cancel' as a string, unless\n                cancel is hit and the 'hard wire cancel' parameter is set to true or nil\n                in which case execution of the script is stopped.`\n                `\n                The icons appear as follows:`\n                `\n                '!' (and nil)`\n                `\n                <img src=\"./media/image3.png\" width=\"241\" height=\"161\" />`\n                `\n                '?'`\n                `\n                <img src=\"./media/image4.png\" width=\"241\" height=\"161\" />`\n                `\n                'Information'`\n                `\n                <img src=\"./media/image5.png\" width=\"241\" height=\"161\" />`\n                `\n                'Stop'`\n                `\n                <img src=\"./media/image6.png\" width=\"241\" height=\"161\" />`\n                `\n                The buttons appear as follows:`\n                `\n                'OK'`\n                `\n                <img src=\"./media/image7.png\" width=\"269\" height=\"161\" />`\n                `\n                'OKCancel' (and nil)`\n                `\n                <img src=\"./media/image8.png\" width=\"241\" height=\"161\" />`\n                `\n                'YesNo'`\n                `\n                <img src=\"./media/image9.png\" width=\"241\" height=\"161\" />`\n                `\n                'YesNoCancel'`\n                `\n                <img src=\"./media/image10.png\" width=\"339\" height=\"161\" />`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`open` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                iwdb=WSApplication.open(path,bUpdate)\n                ````\n                `\n            `#### Example:`\n                `\n                ```ruby\n                db=WSApplication.open 'd:\\\\temp\\\\1.icmm',false\n                db.open nil,false\n                ````\n                `\n            `#### Description:`\n                `\n                Opens the database with path 'path' and returns an object of type\n                WSDatabase. If the database requires updating and the flag bUpdate\n                evaluates to true then the database will be updated (if possible)\n                otherwise the call will fail`\n                `\n                If the path is blank then uses the current master database, if any.`\n                `\n                Likely exceptions for this method to throw are:`\n                `\n                Error 13 : File Not Found : d:\\\\temp\\\\misc.icmm (error=2: \"The system\n                cannot find the file specified.\")`\n                `\n                if the database is not present.`\n                `\n                Error 13 : File Not Found : z:\\\\misc.icmm (error=3: \"The system cannot\n                find the path specified.\")`\n                `\n                if the database path is invalid`\n                `\n                no database path specified`\n                `\n                if the path is nil and there is no currently selected master database\n                via the UI`\n                `\n                major update failed`\n                `\n                minor update failed`\n                `\n                if there is a problem with a database update`\n                `\n                database requires major update but allow update flag is not set`\n                `\n                database requires minor update but allow update flag is not set`\n                `\n                if the database requires an update but the second parameter is false`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`open_text_view` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.open_text_view(title,filename,delete_on_exit)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                This method opens a text file in a text view within the application. The\n                parameters are a window title, the filename and a Boolean, which if set\n                to true, will cause the file to be deleted when the view is closed.`\n                `\n                It is important to realise that this method does not cause the script to\n                wait until the file is closed â€“ it opens the view and then continues to\n                the next item in the script.`\n                `\n                The purpose of the delete\\_on\\_exit parameter is allow the user to\n                create a temporary file which will be displayed by this method and then\n                deleted when the view is closed by the user.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`override_user_unit (Exchange only â€“ see note in method text)``\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                OK=WSApplication.override_user_unit(code,value)\n                ````\n                `\n            `#### Example:`\n                `\n                ```ruby\n                OK=WSApplication.override_user_unit 'X','ft'\n                ````\n                `\n            `#### Description:`\n                `\n                Overrides a current user unit for the duration of the script`\n                `\n                This can be useful where ICM Exchange is running as a service, where the\n                \"user\" has no settings of it own and you don't want the default user\n                units that are selected for the locale`\n                `\n                Returns `true` if successful, `false` for an unknown unit or value.`\n                `\n                > Note â€“ When scripts are run from the UI, user units are always used.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`override_user_units` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                errs=WSApplication.override_user_units(filename)\n                ````\n                `\n            `#### Example:`\n                `\n                ```ruby\n                errs=WSApplication.override_user_units 'd:\\\\temp\\\\uu.csv'\n                if errs.length<0\n                    puts â€œerror reading CSV fileâ€\n                end\n                ````\n                `\n            `#### Description:`\n                `\n                Bulk overrides the current user units for the duration of the script.`\n                `\n                Takes a filename of a file containing comma separated pairs of unit\n                code, unit value pairs, one pair per line. E.g.`\n                `\n                XY,US Survey ft`\n                `\n                Useful where ICM Exchange is running as a service, where the \"user\" has\n                no settings of it own.`\n                `\n                Returns an error string. An empty string indicates success. Note,\n                however, that any valid units will be applied, regardless of whether\n                there are any errors with other lines of the file.`\n                `\n                A likely exception for this method to throw is:`\n                `\n                Error 13 : File Not Found : z:\\\\uu.csv (error=3: \"The system cannot find\n                the path specified.\")`\n                `\n                if the file does not exist.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`prompt` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                arr=WSApplication.prompt(title,layout,hard_wire_cancel)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                This method displays a prompt grid, similar to that used in the SQL in\n                InfoWorks ICM / InfoNet. It displays values and allows users to edit\n                them.`\n                `\n                Title â€“ the title of the displayed dialog.`\n                `\n                Layout â€“ an array of arrays as described below.`\n                `\n                Hard-wire cancel â€“ if this is set to true or nil, if the user hits\n                cancel, the running of the Ruby script is interrupted.`\n                `\n                The method returns an array of values, one for each line in the dialog.`\n                `\n                The layout parameter must be an array consisting of one array for each\n                line to be displayed.`\n                `\n                The array for each line must contain between 2 and 9 values as follows:`\n                `\n                Index 0 â€“ a string to display as a description of the value for the row`\n                `\n                Index 1 â€“ a type of the value â€“ one of the following strings:`\n                `\n                > NUMBER â€“ a number\n                >\n                > STRING- a string\n                >\n                > DATE â€“ a date (as a Ruby DateTime object)\n                >\n                > BOOLEAN â€“ a Boolean value, appearing in the edit column as a check-box\n                >\n                > READONLY â€“ a read only value, appearing in the edit column as a string\n                > with a grey background. The value is converted to a string except for\n                > Ruby types float and double.`\n                `\n                Index 2 (optional, except for rows of read only type) â€“ a default value\n                i.e. the initial value when the dialog appears. For read only rows, this\n                is the value displayed which cannot, of course, be changed`\n                `\n                Index 3 (optional) a number of decimal places â€“ used for numbers and\n                read only values of Ruby types float and double.`\n                `\n                Index 4 (optional) a subtype â€“ one of the following strings`\n                `\n                > RANGE â€“ valid for NUMBER only, the value will be chosen from a combo\n                > box with values specified in array elements index 5 and 6 inclusive.\n                >\n                > LIST â€“ valid for NUMBER, STRING and DATE only. The value will be\n                > chosen from a combo box of values supplied as an array in array\n                > element 5.\n                >\n                > MONTH â€“ valid for NUMBER only, the value will be chosen from a\n                > combobox containing the names of the months.\n                >\n                > FILE â€“ valid for STRING only, the value will be chosen by pressing a\n                > button and selecting one or more filenames via a file dialog, the\n                > precise details of which will be determined by array elements with\n                > indices 5, 6, 7 and 8 as follows:\n                >\n                > Index 5 â€“ Boolean â€“ true for an 'open' dialog, false for a 'save'\n                > dialog\n                >\n                > Index 6 â€“ String â€“ the file extension\n                >\n                > Index 7 â€“ String â€“ a description of the file type\n                >\n                > Index 8 â€“ Boolean â€“ true to allow the selection of multiple files if\n                > index 5 is set to true giving an 'open' dialog, ignored otherwise\n                >\n                > FOLDER â€“ valid for STRING only, the value will be chosen by pressing a\n                > button and selecting a folder. Array element 6 must be a folder\n                > description as a string or nil, in which case a default title will be\n                > used.`\n                `\n                Here is an example of a prompt exercising most of these options:`\n                `\n                ```rb\n                require 'Date'\n                val=WSApplication.prompt \"Badger\", [\n                    ['This is a number','NUMBER'],\n                    ['This is a string','String'],\n                    ['This is a date','Date'],\n                    ['This is a date with default','Date',DateTime.new(2012,7,13,12,45,00)],\n                    ['This is a number With 4 DP','Number',234.123456,4],\n                    ['This is a month','Number',11,nil,'MONTH'],\n                    ['This is a range','Number',13,2,'RANGE',100,200],\n                    ['String with default','String','Badger'],\n                    ['List','String','Default',nil,'LIST',['Alpha','Beta','Gamma']],\n                    ['List of numbers, no default','Number',nil,nil,'LIST',[3,5,7,11]],\n                    ['List of numbers, with default','Number',23,nil,'LIST',[13,17,19,23]],\n                    ['List of dates, no    default','Date',nil,nil,'LIST',[DateTime.new(2012,7,13,12,45,00),DateTime.new(2012,7,17,13,15,00),DateTime.new(2012,7, 10,17,15,00)]],\n                    ['List of dates, with default','Date',DateTime.new(2011,10,13,14,12,30),nil,'LIST',[DateTime.new(2012,7,13,12,45,00),DateTime.new(2012,7,17, 13,15,00),DateTime.new(2012,7,10,17,15,00)]],\n                    ['This is a bool','Boolean'],\n                    ['This is a false bool','Boolean',false],\n                    ['This is a true bool','Boolean',true],\n                    ['File save','String','Badger.dat',nil,'FILE',false,'dat','Data file',false],\n                    ['File load single','String',nil,nil,'FILE',true,'dat','MySystem data file',false],\n                    ['File load multiple','String',nil,nil,'FILE',true,'dat','More than one MySystem data file',true],\n                    ['This is a folder','String',nil,nil,'FOLDER','Name of MyFolder'],\n                    ['Read Only String','Readonly','Turbo Pump'],\n                    ['Read Only Number','Readonly',12.3456678],\n                    ['Read only number 6 dp','ReadOnly',87.65456789,6]\n                ],false\n                puts val.to_s\n                ````\n                `\n                When run, it looks like this:`\n                `\n                <img src=\"./media/image11.png\" width=\"448\" height=\"315\" />`\n                `\n                As you can see, there are a number of lists (with the button for the\n                pull down to the right), and a number of filenames (with a button\n                showing ellipses to press to invoke the file or folder dialog).`\n                `\n                The read only values are showed greyed out, in this example the rows are\n                ordered so they appear at the bottom of the grid.`\n                `\n                Notice that the date time values in the lists and for defaults are set\n                using DateTime.new as described earlier in this document.`\n                `\n                If OK is hit without changing any values, it returns an array like this:`\n                `\n                ```ruby\n                [nil, nil, nil, #<DateTime: 2012-07-13T12:45:00+00:00 (78595905/32,0,2299161)>, 234.123456, 11.0, 100.0, \"Badger\",\n                \"Default\", nil, 23.0, nil, #<DateTime: 2011-10-13T14:12:30+00:00 (1414568501/576,0,2299161)>, false, false, true, \"Badger.dat\", nil, nil, nil, \"Turbo Pump\", 12.3456678, 87.65456789]\n                ````\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`results_folder` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                s=WSApplication.results_folder\n                ````\n                `\n            `#### Example:`\n                `\n                ```rb\n                puts WSApplication.results_folder\n                ````\n                `\n            `#### Description:`\n                `\n                Returns the current results folder as a string`\n                `\n                NB â€“ if you have not specified a results folder, either in a script or\n                in the UI, the default results folder which is used will be returned\n                i.e. this returns the results folder that is actually being used\n                regardless of whether you have explicitly set it or not`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`scalars` (UI only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.scalars(title,layout,hard_wire_cancel)\n                ````\n                `\n            `#### Description:`\n                `\n                \n                This method displays a grid of values, similar to that used in the SQL\n                in InfoWorks ICM / InfoNet.`\n                `\n                The parameters are as follows:`\n                `\n                Title â€“ the title of the displayed dialog.`\n                `\n                Layout â€“ an array of arrays as described below.`\n                `\n                Hard-wire cancel â€“ if this is set to true or nil, if the user hits\n                cancel, the running of the Ruby script is interrupted.`\n                `\n                The layout parameter must be an array consisting of one array for each\n                line to be displayed.`\n                `\n                The array for each line must contain 2 or 3 values as follows:`\n                `\n                Index 0 â€“ a string to display as the description of the value for the\n                row`\n                `\n                Index 1 â€“ the value to be displayed as a Ruby value. If the value is a\n                float or a double it will be displayed by using the Ruby to\\_f method,\n                otherwise the to\\_s method will be used.`\n                `\n                Index 2 (optional) â€“ a number of decimal places to be used between 0 and\n                8 inclusive, this will be used for float and double values and ignored\n                for any others.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`script_file``\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                s=WSApplication.script_file\n                ````\n                `\n            `#### Description:`\n                `\n                \n                Returns the full path of the script file. This will either by the file\n                specified on the command line of the Exchange product or the file\n                selected in the user interface.`\n                `\n                This method is supplied primarily to obtain the script's path in order\n                to process the path to get the paths of files in the same directory e.g.\n                config files for the Open Data Import and Export Centres.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`set_exit_code` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.set_exit_code(exit_code)\n                ````\n                `\n            `#### Example:`\n                `\n                ```ruby\n                WSApplication.set_exit_code 12\n                ````\n                `\n            `#### Description:`\n                `\n                Sets the InfoLite application's exit code. The exit code must evaluate\n                to a Fixnum, if it does not, an exception will be thrown:`\n                `\n                exit code is not a number`\n                `\n                > Note - Calling this method *does not* cause the script to terminate,\n                it merely sets the exit code returned to the operating system when the\n                script *does* terminate.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`set_working_folder` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```ruby\n                WSApplication.set_working_folder(path)\n                ````\n                `\n            `#### Example:`\n                `\n                ```rb\n                WSApplication.set_working_folder 'd:\\\\temp\\\\wf'\n                ````\n                `\n            `#### Description:`\n                `\n                Sets the working folder.`\n                `\n                NB â€“ this working folder will be used for the duration of this ICM\n                Exchange run. it will not be stored in the registry and will not be used\n                by any other instances of ICM Exchange or the ICM UI.`\n                `\n                `\n                `\n        [/method]\n        [method exchange=true ui=true documentation=\"official\" icmVersion=\"1.6.6\"]\n        ###`set_results_folder` (Exchange only)`\n                `\n            `#### Syntax:`\n                `\n                ```rb\n                WSApplication.set_results_folder(path)\n                ````\n                `\n            `#### Example:`\n                `\n                ```rb\n                WSApplication.set_results_folder 'd:\\\\temp\\\\rf'\n                ````\n                `\n            `#### Description:`\n                `\n                Sets the results folder.`\n                `\n                NB â€“ this results folder will be used for the duration of this ICM\n                Exchange run. it will not be stored in the registry and will not be used\n                by any other instances of ICM Exchange or the ICM UI.\n                \n                `\n                `\n        [/method]",
    "inputLanguage": "text"
}